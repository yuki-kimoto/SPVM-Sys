# Copyright (c) 2023 Yuki Kimoto
# MIT License

class Sys::Time::Util {
  use Sys::Time::Timespec;
  use Sys::Time::Timeval;
  
  static method nanoseconds_to_timespec : Sys::Time::Timespec ($nanoseconds : long) {
    
    unless ($nanoseconds >= 0) {
      die "\$nanoseconds must be greater than or equal to 0.";
    }
    
    my $sec = $nanoseconds / 1_000_000_000;
    
    my $nsec = $nanoseconds - $sec * 1_000_000_000;
    
    my $ts = Sys::Time::Timespec->new;
    
    $ts->set_tv_sec($sec);
    
    $ts->set_tv_nsec($nsec);
    
    return $ts;
  }
  
  static method timespec_to_nanoseconds : long ($ts : Sys::Time::Timespec) {
    
    my $tv_sec = $ts->tv_sec;
    
    unless ($tv_sec >= 0) {
      die "\$ts->tv_sec must be greater than or equal to 0.";
    }
    
    my $tv_nsec = $ts->tv_nsec;
    
    unless ($tv_nsec >= 0) {
      die "\$ts->tv_nsec must be greater than or equal to 0.";
    }
    
    my $nanoseconds = $ts->tv_sec * 1_000_000_000 + $ts->tv_nsec;
    
    return $nanoseconds;
  }
  
  static method microseconds_to_timeval : Sys::Time::Timeval ($microseconds : long) {
    
    unless ($microseconds >= 0) {
      die "\$microseconds must be greater than or equal to 0.";
    }
    
    my $sec = $microseconds / 1_000_000;
    
    my $usec = $microseconds - $sec * 1_000_000;
    
    my $ts = Sys::Time::Timeval->new;
    
    $ts->set_tv_sec($sec);
    
    $ts->set_tv_usec($usec);
    
    return $ts;
  }
  
  static method timeval_to_microseconds : double ($tv : Sys::Time::Timeval) {
    
    my $tv_sec = $tv->tv_sec;
    
    unless ($tv_sec >= 0) {
      die "\$tv->tv_sec must be greater than or equal to 0.";
    }
    
    my $tv_usec = $tv ->tv_usec;
    
    unless ($tv_usec >= 0) {
      die "\$tv->tv_usec must be greater than or equal to 0.";
    }
    
    my $microseconds = $tv_sec * 1_000_000 + $tv_usec;
    
    return $microseconds;
  }
  
  static method float_seconds_to_timespec : Sys::Time::Timespec ($float_seconds : double) {
    
    unless ($float_seconds >= 0) {
      die "\$float_seconds must be greater than or equal to 0.";
    }
    
    my $sec = (long)$float_seconds;
    
    my $nsec = (long)(($float_seconds - $sec) * 1_000_000_000);
    
    my $ts = Sys::Time::Timespec->new;
    
    $ts->set_tv_sec($sec);
    
    $ts->set_tv_nsec($nsec);
    
    return $ts;
  }
  
  static method timespec_to_float_seconds : double ($ts : Sys::Time::Timespec) {
    my $tv_sec = $ts->tv_sec;
    
    unless ($tv_sec >= 0) {
      die "\$ts->tv_sec must be greater than or equal to 0.";
    }
    
    my $tv_nsec = $ts->tv_nsec;
    
    unless ($tv_nsec >= 0) {
      die "\$ts->tv_nsec must be greater than or equal to 0.";
    }
    
    my $float_seconds = $tv_sec + (double)$tv_nsec / 1_000_000_000;
    
    return $float_seconds;
  }
  
  static method float_seconds_to_timeval : Sys::Time::Timeval ($float_seconds : double) {
    
    unless ($float_seconds >= 0) {
      die "\$float_seconds must be greater than or equal to 0.";
    }
    
    my $sec = (long)$float_seconds;
    
    my $usec = (long)(($float_seconds - $sec) * 1_000_000);
    
    my $tv = Sys::Time::Timeval->new;
    
    $tv->set_tv_sec($sec);
    
    $tv->set_tv_usec($usec);
    
    return $tv;
  }
  
  static method timeval_to_float_seconds : double ($tv : Sys::Time::Timeval) {
    
    my $tv_sec = $tv->tv_sec;
    
    unless ($tv_sec >= 0) {
      die "\$tv->tv_sec must be greater than or equal to 0.";
    }
    
    my $tv_usec = $tv ->tv_usec;
    
    unless ($tv_usec >= 0) {
      die "\$tv->tv_usec must be greater than or equal to 0.";
    }
    
    my $float_seconds = $tv_sec + (double)$tv_usec / 1_000_000;
    
    return $float_seconds;
  }
  
  static method float_seconds_to_nanoseconds : long ($float_seconds : double) {
    
    unless ($float_seconds >= 0) {
      die "\$float_seconds must be greater than or equal to 0.";
    }
    
    my $nanoseconds = (long)($float_seconds * 1_000_000_000);
    
    return $nanoseconds;
  }
  
  static method nanoseconds_to_float_seconds : double ($nanoseconds : long) {
    
    unless ($nanoseconds >= 0) {
      die "\$nanoseconds must be greater than or equal to 0.";
    }
    
    my $float_seconds = (double)$nanoseconds / 1_000_000_000;
    
    return $float_seconds;
  }
  
  static method float_seconds_to_microseconds : long ($float_seconds : double) {
    
    unless ($float_seconds >= 0) {
      die "\$float_seconds must be greater than or equal to 0.";
    }
    
    my $microseconds = (long)($float_seconds * 1_000_000);
    
    return $microseconds;
  }
  
  static method microseconds_to_float_seconds : double ($microseconds : long) {
    
    unless ($microseconds >= 0) {
      die "\$microseconds must be greater than or equal to 0.";
    }
    
    my $float_seconds = (double)$microseconds / 1_000_000;
    
    return $float_seconds;
  }
  
  static method timeval_interval : double ($tv_a : Sys::Time::Timeval, $tv_b : Sys::Time::Timeval) {
    
    my $tv_a_sec = $tv_a->tv_sec;
    
    unless ($tv_a_sec >= 0) {
      die "\$tv_a->tv_sec must be greater than or equal to 0.";
    }
    
    my $tv_a_usec = $tv_a->tv_usec;
    
    unless ($tv_a_usec >= 0) {
      die "\$tv_a->tv_usec must be greater than or equal to 0.";
    }
    
    my $tv_b_sec = $tv_b->tv_sec;
    
    unless ($tv_b_sec >= 0) {
      die "\$tv_b->tv_sec must be greater than or equal to 0.";
    }
    
    my $tv_b_usec = $tv_b->tv_usec;
    
    unless ($tv_b_usec >= 0) {
      die "\$tv_b->tv_usec must be greater than or equal to 0.";
    }
    
    my $tv_interval = ($tv_b_sec - $tv_a_sec) + (double)($tv_b_usec - $tv_a_usec) / 1_000_000;
    
    return $tv_interval;
  }
  
  static method timespec_interval : double ($ts_a : Sys::Time::Timespec, $ts_b : Sys::Time::Timespec) {
    
    my $ts_a_sec = $ts_a->tv_sec;
    
    unless ($ts_a_sec >= 0) {
      die "\$ts_a->tv_sec must be greater than or equal to 0.";
    }
    
    my $ts_a_nsec = $ts_a->tv_nsec;
    
    unless ($ts_a_nsec >= 0) {
      die "\$ts_a->tv_nsec must be greater than or equal to 0.";
    }
    
    my $ts_b_sec = $ts_b->tv_sec;
    
    unless ($ts_b_sec >= 0) {
      die "\$ts_b->tv_sec must be greater than or equal to 0.";
    }
    
    my $ts_b_nsec = $ts_b->tv_nsec;
    
    unless ($ts_b_nsec >= 0) {
      die "\$ts_b->tv_nsec must be greater than or equal to 0.";
    }
    
    my $ts_interspec = ($ts_b_sec - $ts_a_sec) + (double)($ts_b_nsec - $ts_a_nsec) / 1_000_000_000;
    
    return $ts_interspec;
  }
  
}
