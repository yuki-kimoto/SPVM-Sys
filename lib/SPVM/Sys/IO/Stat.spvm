class Sys::IO::Stat : pointer {
  use Sys::User;
  use Sys::IO::Constant as IO;
  use Hash;
  
  # Class methods
  static method new : Sys::IO::Stat ($path = undef : string) {
    my $items = items;
    
    my $self = &_new;;
    
    if ($items > 0) {
      &stat($path, $self);
    }
    
    return $self;
  }
  
  private native static method _new : Sys::IO::Stat ();

  native static method stat_raw : int ($path : string, $stat : Sys::IO::Stat);
  
  native static method stat : int ($path : string, $stat : Sys::IO::Stat);
  
  native static method lstat_raw : int ($path : string, $stat : Sys::IO::Stat);
  
  native static method lstat : int ($path : string, $stat : Sys::IO::Stat);
  
  native static method fstat_raw : int ($fd : int, $stat : Sys::IO::Stat);

  native static method fstat : int ($fd : int, $stat : Sys::IO::Stat);

  # Instance methods
  native method DESTROY : void ();
  native method st_dev : long ();
  native method st_ino : long ();
  native method st_mode : int ();
  native method st_nlink : long ();
  native method st_uid : int ();
  native method st_gid : int ();
  native method st_rdev : long ();
  native method st_size : long ();
  native method st_blksize : long ();
  native method st_blocks : long ();
  native method st_mtime : long ();
  native method st_atime : long ();
  native method st_ctime : long ();
  native method st_mtim_tv_nsec : long ();
  native method st_atim_tv_nsec : long ();
  native method st_ctim_tv_nsec : long ();

  method A : double ($base_time : long) {

    my $atime = $self->st_atime;

    my $result_time = ($base_time - $atime) / 86400.0;

    return $result_time;
  }

  method C : double ($base_time : long) {

    my $ctime = $self->st_ctime;

    my $result_time = ($base_time - $ctime) / 86400.0;

    return $result_time;
  }

  method M : double ($base_time : long) {

    my $mtime = $self->st_mtime;

    my $result_time = ($base_time - $mtime) / 86400.0;

    return $result_time;
  }

  method O : int () {

    my $ok = 0;
    if (Sys->defined("_WIN32")) {
      if ($self->st_uid == 0) {
        $ok = 1;
      }
    }
    else {
      if ($self->st_uid == Sys::User->getuid) {
        $ok = 1;
      }
    }
    
    return $ok;
  }

  method S : int () {
    my $ok = 0;
    unless (Sys->defined("_WIN32")) {
      # Socket
      if (($self->st_mode & IO->S_IFMT) == IO->S_IFSOCK) {
        $ok = 1;
      }
    }
    
    return $ok;
  }

  method b : int () {

    # Block device
    my $ok = 0;
    if (($self->st_mode & IO->S_IFMT) == IO->S_IFBLK) {
      $ok = 1;
    }

    return $ok;
  }

  method c : int () {

    # Character device
    my $ok = 0;
    if (($self->st_mode & IO->S_IFMT) == IO->S_IFCHR) {
      $ok = 1;
    }
    
    return $ok;
  }

  method d : int () {

    my $ok = 0;
    if (($self->st_mode & IO->S_IFMT) == IO->S_IFDIR) {
      $ok = 1;
    }
    
    return $ok;
  }

  method e : int () {

    my $ok = 1;

    return $ok;
  }

  method f : int () {

    my $ok = 0;
    if (($self->st_mode & IO->S_IFMT) == IO->S_IFREG) {
      $ok = 1;
    }
    
    return $ok;
  }

  method g : int () {

    my $ok = 0;
    unless (Sys->defined("_WIN32")) {
      if ($self->st_mode & IO->S_ISGID) {
        $ok = 1;
      }
    }
    
    return $ok;
  }

  method k : int () {

    my $ok = 0;
    unless (Sys->defined("_WIN32")) {
      if ($self->st_mode & IO->S_ISVTX) {
        $ok = 1;
      }
    }
    
    return $ok;
  }

  method l : int () {

    # Symbolic link
    my $ok = 0;
    if (($self->st_mode & IO->S_IFMT) == IO->S_IFLNK) {
      $ok = 1;
    }

    return $ok;
  }

  method o : int () {
    if (Sys->defined("_WIN32")) {
      return $self->O;
    }

    my $ok = 0;
    if ($self->st_uid == Sys::User->geteuid) {
      $ok = 1;
    }
    return $ok;
  }

  method p : int () {

    # FIFO/PIPE
    my $ok = 0;
    if (($self->st_mode & IO->S_IFMT) == IO->S_IFIFO) {
      $ok = 1;
    }
    
    return $ok;
  }

  method s : long () {

    my $size = $self->st_size;

    return $size;
  }

  method u : int () {

    # Character device
    my $ok = 0;
    unless (Sys->defined("_WIN32")) {
      if ($self->st_mode & IO->S_ISUID) {
        $ok = 1;
      }
    }

    return $ok;
  }

  method z : int () {

    my $ok = 0;
    my $size = $self->st_size;
    if ($size == 0) {
      $ok = 1;
    }
    
    return $ok;
  }
}
