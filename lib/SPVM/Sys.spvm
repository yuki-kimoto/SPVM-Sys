class Sys {
  use Sys::OS;
  use Sys::Env;
  use Sys::FileTest;
  use Sys::Ioctl;
  use Sys::User;
  use Sys::Time;
  use Time;
  use Sys::Process;
  use Sys::IO::Stat;
  
  static method osname : string () {
    my $osname : string;
    
    if (Sys::OS->defined("__linux__")) {
      $osname = "linux";
    }
    elsif (Sys::OS->defined("_WIN32")) {
      $osname = "MSWin32";
    }
    elsif (Sys::OS->defined("__FreeBSD__")) {
      $osname = "freebsd";
    }
    elsif (Sys::OS->defined("__OpenBSD__")) {
      $osname = "openbsd";
    }
    elsif (Sys::OS->defined("__solaris")) {
      $osname = "solaris";
    }
    elsif (Sys::OS->defined("__sun")) {
      $osname = "solaris";
    }
    elsif (Sys::OS->defined("__APPLE__")) {
      $osname = "darwin";
    }
    else {
      die "The osname method is not supported this os";
    }
    
    return $osname;
  }
  
  static method getenv : string ($name : string) {
    return Sys::Env->getenv($name);
  }
  
  static method setenv : int ($name : string, $value : string, $overwrite : int) {
    return Sys::Env->setenv($name, $value, $overwrite) == 0;
  }
  
  static method unsetenv : int ($name : string) {
    return Sys::Env->unsetenv($name) == 0;
  }
  
  static method A : double ($file : string) {
    
    unless ($file) {
      die "The file must be defined";
    }
    
    my $stat = Sys->stat($file);
    
    my $result_time = $stat->A;
    
    return $result_time;
  }
  
  static method C : double ($file : string) {
    
    unless ($file) {
      die "The file must be defined";
    }
    
    my $stat = Sys->stat($file);
    my $result_time = $stat->C;
    
    return $result_time;
  }
  
  static method M : double ($file : string) {
    
    unless ($file) {
      die "The file must be defined";
    }
    
    my $stat = Sys->stat($file);
    
    my $result_time = $stat->M;
    
    return $result_time;
  }
  
  static method O : int ($file : string) {
    
    unless ($file) {
      die "The file must be defined";
    }
    
    my $stat = Sys::IO::Stat->new;
    my $status = Sys::IO::Stat->stat_raw($file, $stat);
    
    my $ok = 0;
    unless ($status == -1) {
      $ok = $stat->O;
    }
    
    return $ok;
  }
  
  static method R : int ($file : string) {
    unless ($file) {
      die "The file must be defined";
    }
    
    my $stat = Sys::IO::Stat->new;
    my $status = Sys::IO::Stat->stat_raw($file, $stat);
    
    # Character device
    my $ok = 0;
    unless ($status == -1) {
      $ok = $stat->R;
    }
    
    return $ok;
  }
  
  static method S : int ($file : string) {
    unless ($file) {
      die "The file must be defined";
    }
    
    my $stat = Sys->stat($file);
    
    my $ok = $stat->S;
    
    return $ok;
  }
  
  static method W : int ($file : string) {
    unless ($file) {
      die "The file must be defined";
    }
    
    my $stat = Sys::IO::Stat->new;
    my $status = Sys::IO::Stat->stat_raw($file, $stat);
    
    # Character device
    my $ok = 0;
    unless ($status == -1) {
      $ok = $stat->W;
    }
    
    return $ok;
  }
  
  static method X : int ($file : string) {
    unless ($file) {
      die "The file must be defined";
    }
    
    my $stat = Sys::IO::Stat->new;
    my $status = Sys::IO::Stat->stat_raw($file, $stat);
    
    # Character device
    my $ok = 0;
    unless ($status == -1) {
      $ok = $stat->X;
    }
    
    return $ok;
  }
  
  static method b : int ($file : string) {
    
    unless ($file) {
      die "The file must be defined";
    }
    
    my $stat = Sys::IO::Stat->new;
    my $status = Sys::IO::Stat->stat_raw($file, $stat);
    
    # Block device
    my $ok = 0;
    unless ($status == -1) {
      $ok = $stat->b;
    }
    
    return $ok;
  }
  
  static method c : int ($file : string) {
    
    unless ($file) {
      die "The file must be defined";
    }
    
    my $stat = Sys::IO::Stat->new;
    my $status = Sys::IO::Stat->stat_raw($file, $stat);
    
    # Character device
    my $ok = 0;
    unless ($status == -1) {
      $ok = $stat->c;
    }
    
    return $ok;
  }
  
  static method d : int ($file : string) {
    
    unless ($file) {
      die "The file must be defined";
    }
    
    my $stat = Sys::IO::Stat->new;
    my $status = Sys::IO::Stat->stat_raw($file, $stat);
    
    my $ok = 0;
    unless ($status == -1) {
      $ok = $stat->d;
    }
    
    return $ok;
  }
  
  static method e : int ($file : string) {
    
    unless ($file) {
      die "The file must be defined";
    }
    
    my $stat = Sys::IO::Stat->new;
    my $status = Sys::IO::Stat->stat_raw($file, $stat);
    
    my $ok = 0;
    unless ($status == -1) {
      $ok = $stat->e;
    }
    
    return $ok;
  }
  
  static method f : int ($file : string) {
    
    unless ($file) {
      die "The file must be defined";
    }
    
    my $stat = Sys::IO::Stat->new;
    my $status = Sys::IO::Stat->stat_raw($file, $stat);
    
    my $ok = 0;
    unless ($status == -1) {
      $ok = $stat->f;
    }
    
    return $ok;
  }
  
  static method g : int ($file : string) {
    
    unless ($file) {
      die "The file must be defined";
    }
    
    my $stat = Sys::IO::Stat->new;
    my $status = Sys::IO::Stat->stat_raw($file, $stat);
    
    my $ok = 0;
    unless ($status == -1) {
      $ok = $stat->g;
    }
    
    return $ok;
  }
  
  static method k : int ($file : string) {
    
    unless ($file) {
      die "The file must be defined";
    }
    
    my $stat = Sys::IO::Stat->new;
    my $status = Sys::IO::Stat->stat_raw($file, $stat);
    
    my $ok = 0;
    unless ($status == -1) {
      $ok = $stat->k;
    }
    
    return $ok;
  }
  
  static method l : int ($file : string) {
    
    unless ($file) {
      die "The file must be defined";
    }
    
    if (Sys::OS->is_windows) {
      Sys::IO::Windows->is_symlink($file);
    }
    else {
      my $stat = Sys::IO::Stat->new;
      my $status = Sys::IO::Stat->lstat_raw($file, $stat);
      
      # Symbolic link
      my $ok = 0;
      unless ($status == -1) {
        $ok = $stat->l;
      }
      
      return $ok;
    }
  }
  
  static method o : int ($file : string) {
    unless ($file) {
      die "The file must be defined";
    }
    
    my $stat = Sys::IO::Stat->new;
    my $status = Sys::IO::Stat->stat_raw($file, $stat);
    
    my $ok = 0;
    unless ($status == -1) {
      $ok = $stat->o;
    }
    return $ok;
  }
  
  static method p : int ($file : string) {
    
    unless ($file) {
      die "The file must be defined";
    }
    
    my $stat = Sys::IO::Stat->new;
    my $status = Sys::IO::Stat->stat_raw($file, $stat);
    
    # FIFO/PIPE
    my $ok = 0;
    unless ($status == -1) {
      $ok = $stat->p;
    }
    
    return $ok;
  }
  
  static method r : int ($file : string) {
    unless ($file) {
      die "The file must be defined";
    }
    
    my $stat = Sys::IO::Stat->new;
    my $status = Sys::IO::Stat->stat_raw($file, $stat);
    
    # Character device
    my $ok = 0;
    unless ($status == -1) {
      $ok = $stat->r;
    }
    
    return $ok;
  }
  
  static method s : long ($file : string) {
    
    unless ($file) {
      die "The file must be defined";
    }
    
    my $stat = Sys->stat($file);
    
    my $size = $stat->s;
    
    return $size;
  }
  
  static method u : int ($file : string) {
    
    unless ($file) {
      die "The file must be defined";
    }
    
    my $stat = Sys::IO::Stat->new;
    my $status = Sys::IO::Stat->stat_raw($file, $stat);
    
    # Character device
    my $ok = 0;
    unless ($status == -1) {
      $ok = $stat->u;
    }
    
    return $ok;
  }
  
  static method w : int ($file : string) {
    unless ($file) {
      die "The file must be defined";
    }
    
    my $stat = Sys::IO::Stat->new;
    my $status = Sys::IO::Stat->stat_raw($file, $stat);
    
    # Character device
    my $ok = 0;
    unless ($status == -1) {
      $ok = $stat->w;
    }
    
    return $ok;
  }
  
  static method x : int ($file : string) {
    unless ($file) {
      die "The file must be defined";
    }
    
    my $stat = Sys::IO::Stat->new;
    my $status = Sys::IO::Stat->stat_raw($file, $stat);
    
    # Character device
    my $ok = 0;
    unless ($status == -1) {
      $ok = $stat->x;
    }
    
    return $ok;
  }
  
  static method z : int ($file : string) {
    
    unless ($file) {
      die "The file must be defined";
    }
    
    my $stat = Sys->stat($file);
    
    my $ok = $stat->z;
    
    return $ok;
  }

  static method ioctl : int ($fd : int, $request : int, $request_arg = undef : object of Byte|Short|Int|Long|Float|Double|object) {
    if (items == 3) {
      return Sys::Ioctl->ioctl($fd, $request, $request_arg);
    }
    else {
      return Sys::Ioctl->ioctl($fd, $request);
    }
  }
  
  static method getuid : int () {
    return Sys::User->getuid();
  }
  
  static method geteuid : int () {
    return Sys::User->geteuid();
  }
  static method getgid : int () {
    return Sys::User->getgid();
  }
  static method getegid : int () {
    return Sys::User->getegid();
  }
  
  static method setuid : int ($uid : int) {
    return Sys::User->setuid($uid) == 0;
  }
  static method seteuid : int ($euid : int) {
    return Sys::User->seteuid($euid) == 0;
  }
  static method setgid : int ($gid : int) {
    return Sys::User-> setgid($gid) == 0;
  }
  static method setegid : int ($egid : int) {
    return Sys::User->setegid($egid) == 0;
  }
  
  static method setpwent : void () {
    Sys::User->setpwent();
  }
  static method endpwent : void () {
    Sys::User->endpwent();
  }
  static method getpwent : Sys::User::Passwd () {
    return Sys::User->getpwent();
  }
  
  static method setgrent : void () {
    Sys::User->setgrent();
  }
  static method endgrent : void () {
    Sys::User->endgrent();
  }
  static method getgrent : Sys::User::Group () {
    return Sys::User->getgrent();
  }
  
  static method getgroups : int[] () {
    return Sys::User->getgroups();
  }
  static method setgroups : int ($groups : int[]) {
    return Sys::User->setgroups($groups) == 0;
  }

  static method getpwuid : Sys::User::Passwd ($id : int) {
    return Sys::User->getpwuid($id);
  }
  static method getpwnam : Sys::User::Passwd ($name : string) {
    return Sys::User->getpwnam($name);
  }

  static method getgrgid : Sys::User::Group ($id : int) {
    return Sys::User->getgrgid($id);
  }
  static method getgrnam : Sys::User::Group ($name : string) {
    return Sys::User->getgrnam($name);
  }
  
  static method times : Sys::Time::Tms () {
    my $tms = Sys::Time::Tms->new;
    Sys::Time->times($tms);
    return $tms;
  }
  
  static method time : long () {
    return Time->time();
  }
  
  static method localtime : Time::Info ($time : long) {
    return Time->localtime($time);
  }
  
  static method gmtime : Time::Info ($time : long) {
    return Time->gmtime($time);
  }
  
  static method getpriority : int ($which : int, $who : int) {
    return Sys::Process->getpriority($which, $who);
  }
  
  static method setpriority : int ($which : int, $who : int, $prio : int) {
    return Sys::Process->setpriority($which, $who, $prio) == 0;
  }
  
  static method sleep : int ($seconds : int) {
    return Sys::Process->sleep($seconds) == 0;
  }
  
  static method wait : int ($wstatus_ref : int*) {
    return Sys::Process->wait($wstatus_ref) == 0;
  }
  
  static method waitpid : int ($pid : int, $wstatus_ref : int*, $options : int) {
    return Sys::Process->waitpid($pid, $wstatus_ref, $options) == 0;
  }
  
  static method system : int ($command : string) {
    return Sys::Process->system($command);
  }
  
  static method exit : int ($status : int) {
    return Sys::Process->exit($status) == 0;
  }
  
  static method pipe : int ($pipe_fds : int[]) {
    return Sys::Process->pipe($pipe_fds) == 0;
  }
  
  static method getpgid : int ($pid : int) {
    return Sys::Process->getpgid($pid);
  }
  
  static method setpgid : int ($pid : int, $pgid : int) {
    return Sys::Process->setpgid($pid, $pgid) == 0;
  }
  
  static method getpid : int () {
    return Sys::Process->getpid();
  }
  
  static method getppid : int () {
    return Sys::Process->getppid();
  }
  
  static method exec : int ($path : string, $args : string[]) {
    return Sys::Process->execv($path, $args);
  }
  
  static method stat : Sys::IO::Stat ($path : string) {
    my $stat = Sys::IO::Stat->new;
    Sys::IO::Stat->stat($path, $stat);
    return $stat;
  }
  
  static method lstat : Sys::IO::Stat ($path : string) {
    my $stat = Sys::IO::Stat->new;
    Sys::IO::Stat->lstat($path, $stat);
    return $stat;
  }
  
  static method mkdir : int ($path : string, $mode : int) {
    return Sys::IO->mkdir($path, $mode) == 0;
  }
  
  static method umask : int ($mode : int) {
    return Sys::IO->umask($mode) == 0;
  }
  
  static method rmdir : int ($path : string) {
    return Sys::IO->rmdir($path) == 0;
  }
  
  static method unlink : int ($pathname : string) {
    my $status = 0;
    
    if (Sys::OS->is_windows) {
      $status = Sys::IO::Windows->unlink($pathname);
    }
    else {
      $status = Sys::IO->unlink($pathname);
    }
    
    return $status == 0;
  }
  
  static method rename : int ($oldpath : string, $newpath : string) {
    my $status = 0;
    if (Sys::OS->is_windows) {
      $status = Sys::IO::Windows->rename($oldpath, $newpath);
    }
    else {
      $status = Sys::IO->rename($oldpath, $newpath);
    }
    
    return $status == 0;
  }
  
  static method readlink : string ($file : string) {
    if (Sys::OS->is_windows) {
      my $buffer_size = Sys::IO::Windows->get_readlink_buffer_size($file);
      my $buffer = (mutable string)new_string_len $buffer_size;
      Sys::IO::Windows->readlink($file, $buffer, $buffer_size);
      return $buffer;
    }
    else {
      my $buffer_size = Sys::IO->get_readlink_buffer_size($file);
      my $buffer = (mutable string)new_string_len $buffer_size;
      Sys::IO->readlink($file, $buffer, $buffer_size);
      return $buffer;
    }
  }
  
  static method chdir : int ($path : string) {
    return Sys::IO->chdir($path) == 0;
  }
  
  static method chmod : int ($mode :int, $path : string) {
    return Sys::IO->chmod($path, $mode) == 0;
  }
  
  static method chown : int ($owner : int, $group : int, $path : string) {
    return Sys::IO->chown($path, $owner, $group) == 0;
  }
  
  static method symlink : int ($oldpath : string, $newpath : string) {
    my $status = 0;
    if (Sys::OS->is_windows) {
      $status = Sys::IO::Windows->symlink($oldpath, $newpath);
    }
    else {
      $status = Sys::IO->symlink($oldpath, $newpath);
    }
    
    return $status == 0;
  }
  
  static method opendir : Sys::IO::DirStream ($dir : string) {
    return Sys::IO->opendir($dir);
  }
  
  static method closedir : int ($dirp : Sys::IO::DirStream) {
    return Sys::IO->closedir($dirp) == 0;
  }
  
  static method readdir : Sys::IO::Dirent ($dirp : Sys::IO::DirStream) {
    return Sys::IO->readdir($dirp);
  }
  
  static method rewinddir : void ($dirp : Sys::IO::DirStream) {
    Sys::IO->rewinddir($dirp);
  }
  
  static method telldir : long ($dirp : Sys::IO::DirStream) {
    return Sys::IO->telldir($dirp);
  }
  
  static method seekdir : void ($dirp : Sys::IO::DirStream, $offset : long) {
    Sys::IO->seekdir($dirp, $offset);
  }
  
  static method utime : int ($atime : long, $mtime : long, $filename : string) {
    my $times = Sys::IO::Utimbuf->new;
    $times->set_actime($atime);
    $times->set_modtime($mtime);
    
    return Sys::IO->utime($filename, $times) == 0;
  }
}
