class TestCase::Sys {
  use Sys;
  use Sys::IO;
  use Sys::OS;
  use Sys::IO::Constant as IO;
  use Sys::Ioctl::Constant as IOCTL;
  use Sys::Socket::Constant as SOCKET;
  use Fn;

  static method A : int () {

    {
      # File
      {
        my $file = "t/ftest/file_empty.txt";
        my $file_test_ok = Sys->A($file);
      }
    }

    return 1;
  }

  static method C : int () {

    {
      # File
      {
        my $file = "t/ftest/file_empty.txt";
        my $file_test_ok = Sys->C($file);
      }
    }

    return 1;
  }

  static method M : int () {

    {
      # File
      {
        my $file = "t/ftest/file_empty.txt";
        my $file_test_ok = Sys->M($file);
      }
    }

    return 1;
  }

  static method O : int () {

    {
      # File
      {
        my $file = "t/ftest/file_empty.txt";
        my $file_test_ok = Sys->O($file);
      }
    }

    return 1;
  }

  static method R : int () {

    {
      # File
      {
        my $file = "t/ftest/file_empty.txt";
        my $file_test_ok = Sys->R($file);
        unless ($file_test_ok == 1) {
          return 0;
        }
      }
    }

    {
      # File
      {
        my $file = "t/ftest/not_exists.txt";
        my $file_test_ok = Sys->R($file);
        unless ($file_test_ok == 0) {
          return 0;
        }
      }
    }

    return 1;
  }

  static method S : int () {

    {
      # File
      {
        my $file = "t/ftest/file_empty.txt";
        my $file_test_ok = Sys->S($file);
      }
    }

    return 1;
  }

  static method W : int () {

    {
      # File
      {
        my $file = "t/ftest/file_empty.txt";
        my $file_test_ok = Sys->W($file);
        unless ($file_test_ok == 1) {
          return 0;
        }
      }
    }

    {
      # File
      {
        my $file = "t/ftest/not_exists.txt";
        my $file_test_ok = Sys->W($file);
        unless ($file_test_ok == 0) {
          return 0;
        }
      }
    }

    return 1;
  }

  static method X : int () {
    {
      # File
      {
        my $file = "t/ftest/myexe.exe";
        my $file_test_ok = Sys->X($file);
        unless ($file_test_ok == 1) {
          return 0;
        }
      }
    }

    {
      # File
      {
        my $file = "t/ftest/myexe.bat";
        my $file_test_ok = Sys->X($file);
        unless ($file_test_ok == 1) {
          return 0;
        }
      }
    }


    {
      # File
      {
        my $file = "t/ftest/file_empty.txt";
        my $file_test_ok = Sys->X($file);
        unless ($file_test_ok == 0) {
          return 0;
        }
      }
    }

    {
      # File
      {
        my $file = "t/ftest/not_exists.txt";
        my $file_test_ok = Sys->X($file);
        unless ($file_test_ok == 0) {
          return 0;
        }
      }
    }

    return 1;
  }

  static method b : int () {

    {
      # File
      {
        my $file = "t/ftest/file_empty.txt";
        my $file_test_ok = Sys->b($file);
      }
    }

    return 1;
  }


  static method d : int () {

    {
      # Not exists
      {
        my $file = "t/ftest/not_found_file";
        my $file_test_ok = Sys->d($file);
        unless ($file_test_ok == 0) {
          return 0;
        }
      }

      # File
      {
        my $file = "t/ftest/file_empty.txt";
        my $file_test_ok = Sys->d($file);
        unless ($file_test_ok == 0) {
          return 0;
        }
      }

      # Directory
      {
        my $file = "t/ftest/dir_empty";
        my $file_test_ok = Sys->d($file);
        unless ($file_test_ok == 1) {
          return 0;
        }
      }
    }

    $@ = undef;

    return 1;
  }

  static method e : int () {

    {
      # File
      {
        my $file = "t/ftest/file_empty.txt";
        my $file_test_ok = Sys->e($file);
        unless ($file_test_ok == 1) {
          return 0;
        }
      }

      # Not exists
      {
        my $file = "t/ftest/not_found_file";
        my $file_test_ok = Sys->e($file);
        unless ($file_test_ok == 0) {
          return 0;
        }
      }

      # Directory
      {
        my $file = "t/ftest/dir_empty";
        my $file_test_ok = Sys->e($file);
        unless ($file_test_ok == 1) {
          return 0;
        }
      }
    }
    return 1;
  }

  static method f : int () {

    {
      # Not exists
      {
        my $file = "t/ftest/not_found_file";
        my $file_test_ok = Sys->f($file);
        unless ($file_test_ok == 0) {
          return 0;
        }
      }

      # File
      {
        my $file = "t/ftest/file_empty.txt";
        my $file_test_ok = Sys->f($file);
        unless ($file_test_ok == 1) {
          return 0;
        }
      }

      # Directory
      {
        my $file = "t/ftest/dir_empty";
        my $file_test_ok = Sys->f($file);
        unless ($file_test_ok == 0) {
          return 0;
        }
      }
    }

    $@ = undef;

    return 1;
  }

  static method g : int () {

    {
      # File
      {
        my $file = "t/ftest/file_empty.txt";
        my $file_test_ok = Sys->g($file);
      }
    }

    return 1;
  }

  static method k : int () {

    {
      # File
      {
        my $file = "t/ftest/file_empty.txt";
        my $file_test_ok = Sys->k($file);
      }
    }

    return 1;
  }

  static method l : int () {

    {
      # File
      {
        my $file = "t/ftest/file_empty.txt";
        my $file_test_ok = Sys->l($file);
      }
    }

    return 1;
  }

  static method o : int () {

    {
      # File
      {
        my $file = "t/ftest/file_empty.txt";
        my $file_test_ok = Sys->o($file);
      }
    }

    return 1;
  }

  static method p : int () {

    {
      # File
      {
        my $file = "t/ftest/file_empty.txt";
        my $file_test_ok = Sys->p($file);
      }
    }

    return 1;
  }
  static method r : int () {

    {
      # File
      {
        my $file = "t/ftest/file_empty.txt";
        my $file_test_ok = Sys->r($file);
        unless ($file_test_ok == 1) {
          return 0;
        }
      }
    }

    {
      # File
      {
        my $file = "t/ftest/not_exists.txt";
        my $file_test_ok = Sys->r($file);
        unless ($file_test_ok == 0) {
          return 0;
        }
      }
    }

    return 1;
  }

  static method s : int () {

    {
      # File
      {
        my $file = "t/ftest/file_empty.txt";
        my $size = Sys->s($file);
        unless ($size == 0) {
          return 0;
        }
      }
    }

    return 1;
  }

  static method u : int () {

    {
      # File
      {
        my $file = "t/ftest/file_empty.txt";
        my $file_test_ok = Sys->u($file);
      }
    }

    return 1;
  }

  static method w : int () {

    {
      # File
      {
        my $file = "t/ftest/file_empty.txt";
        my $file_test_ok = Sys->w($file);
        unless ($file_test_ok == 1) {
          return 0;
        }
      }
    }

    {
      # File
      {
        my $file = "t/ftest/not_exists.txt";
        my $file_test_ok = Sys->w($file);
        unless ($file_test_ok == 0) {
          return 0;
        }
      }
    }

    return 1;
  }

  static method x : int () {

    {
      # File
      {
        my $file = "t/ftest/myexe.exe";
        my $file_test_ok = Sys->x($file);
        unless ($file_test_ok == 1) {
          return 0;
        }
      }
    }

    {
      # File
      {
        my $file = "t/ftest/myexe.bat";
        my $file_test_ok = Sys->x($file);
        unless ($file_test_ok == 1) {
          return 0;
        }
      }
    }

    {
      # File
      {
        my $file = "t/ftest/file_empty.txt";
        my $file_test_ok = Sys->x($file);
        unless ($file_test_ok == 0) {
          return 0;
        }
      }
    }

    {
      # File
      {
        my $file = "t/ftest/not_exists.txt";
        my $file_test_ok = Sys->x($file);
        unless ($file_test_ok == 0) {
          return 0;
        }
      }
    }

    return 1;
  }

  static method z : int () {

    {
      # File
      {
        my $file = "t/ftest/file_empty.txt";
        my $non_zero = Sys->z($file);
        unless ($non_zero) {
          return 0;
        }
      }
    }
    
    return 1;
  }
  
  static method readlink : int ($test_dir : string) {
    
    my $sep = (string)undef;
    if (Sys::OS->is_windows) {
      $sep = "\\";
    }
    else {
      $sep = "/";
    }
    
    my $file = "$test_dir${sep}foo.txt";
    {
      my $stream = Sys::IO->fopen($file, "wb");
      
      unless ($stream) {
        return 0;
      }
      Sys::IO->fclose($stream);
    }
    
    my $file_symlink = "$test_dir${sep}foo_link";
    {
      Sys->symlink($file, $file_symlink);
      
      my $exists_symlink_file = Sys->l($file_symlink);
      unless ($exists_symlink_file) {
        return 0;
      }
    }
    {
      my $buffer = (mutable string)new_string_len 255;
      my $ret_file = Sys->readlink($file_symlink);
      
      unless ($ret_file eq $file) {
        return 0;
      }
    }
    
    return 1;
  }

  static method mkdir : int ($test_dir : string) {
    my $dir = "$test_dir/foo";
    
    Sys->mkdir($dir, 0755);
    
    unless (Sys->d($dir)) {
      return 0;
    }
    
    {
      eval { Sys->mkdir($dir, 0755); };
      
      unless (Fn->contains($@, "foo")) {
        return 0;
      }
    }
    
    return 1;
  }

  static method umask : int ($test_dir : string) {
    my $dir = "$test_dir/foo";
    
    my $old_mask = Sys->umask(IO->S_IRUSR);
    
    my $cur_mask = Sys->umask(IO->S_IWUSR);

    unless ($cur_mask == IO->S_IRUSR) {
      return 0;
    }
    
    # Restore
    Sys::IO->umask($old_mask);
    
    return 1;
  }

  static method rmdir : int ($test_dir : string) {
    my $dir = "$test_dir/foo";
    
    Sys->mkdir($dir, 0755);
    
    unless (Sys->d($dir)) {
      return 0;
    }
    
    Sys->rmdir($dir);
    
    if (Sys->e($dir)) {
      return 0;
    }
    
    {
      eval { Sys->rmdir($dir); };
      unless (Fn->contains($@, "foo")) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method chdir : int ($test_dir : string) {
    my $dir = "$test_dir/ftest/dir_empty";
    
    Sys->chdir($dir);
    
    my $cwd = Sys::IO->getcwd(undef, 0);
    unless (Fn->contains($cwd, "dir_empty")) {
      return 0;
    }
    
    {
      eval { Sys->chdir("$dir/not_found.txt"); };
      unless (Fn->contains($@, "not_found.txt")) {
        return 0;
      }
    }
    
    return 1;
  }

  static method chmod : int ($test_dir : string) {
    my $file = "$test_dir/foo.txt";
    my $stream = Sys::IO->fopen($file, "w");
    
    unless (Sys->f($file)) {
      return 0;
    }
    
    Sys::IO->fclose($stream);
    
    Sys->chmod(0755, $file);
    
    {
      eval { Sys->chmod(0755, "$file/not_found.txt"); };
      unless (Fn->contains($@, "not_found.txt")) {
        return 0;
      }
    }
    
    return 1;
  }

  static method unlink : int ($test_dir : string) {

    my $file = "$test_dir/foo.txt";
    {
      Sys::IO->fopen($file, "w");
    }
    
    unless (Sys->f($file)) {
      return 0;
    }
    
    my $delete_count = Sys->unlink($file);
    
    unless ($delete_count == 1) {
      return 0;
    }
    
    if (Sys->e($file)) {
      return 0;
    }
    
    {
      eval { Sys->unlink($file); };
      unless (Fn->contains($@, "foo.txt")) {
        return 0;
      }
    }
    
    return 1;
  }

  static method rename : int ($test_dir : string) {

    my $file = "$test_dir/foo.txt";
    {
      Sys::IO->fopen($file, "w");
    }
    
    unless (Sys->e($file)) {
      return 0;
    }
    
    my $new_file = "$test_dir/foo_new.txt";
    Sys::IO->rename($file, $new_file);
    
    if (Sys->e($file)) {
      return 0;
    }
    
    unless (Sys->e($new_file)) {
      return 0;
    }
    
    {
      eval { Sys::IO->rename($file, $new_file); };
      unless (Fn->contains($@, "foo.txt")) {
        return 0;
      }
      unless (Fn->contains($@, "foo_new.txt")) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method ioctl : int () {
    # Socket
    my $socket = Sys::Socket->socket(SOCKET->AF_INET, SOCKET->SOCK_STREAM, 0);
    
    unless ($socket> 0) {
      return 0;
    }

    Fn->defer([$socket : int] method :void () {
      Sys::Socket->close($socket);
    });
    
    my $value_ref = [1];
    my $status_ioctl = 0;
    eval { $status_ioctl = Sys->ioctl($socket, IOCTL->FIONBIO, $value_ref); };
    
    if (Sys::OS->is_windows) {
      unless ($status_ioctl == 0) {
        return 0;
      }
    }
    else {
      if ($@) {
        warn "[Test Output]$@";
      }
      else {
        unless ($status_ioctl == 0) {
          return 0;
        }
      }
    }
    
    return 1;
  }
}
