class TestCase::Sys::Signal {
  use Sys::Signal;
  use Sys::Signal::Constant as SIGNAL;
  use Sys::Process;
  
  static method kill : int () {
    
    my $status = Sys::Signal->kill(0, 0);
    
    unless ($status == 0) {
      return 0;
    }
    
    return 1;
  }
  
  static method alarm : int () {
    
    my $rest1 = Sys::Signal->alarm(5);
    
    unless ($rest1 == 0) {
      return 0;
    }
    
    my $rest2 = Sys::Signal->alarm(5);
    
    unless ($rest2 == 5) {
      return 0;
    }
    
    return 1;
  }
  
  static method ualarm : int () {
    
    my $rest1 = Sys::Signal->ualarm(5_000, 0);
      
    unless ($rest1 >= 0) {
      return 0;
    }
    
    my $rest2 = Sys::Signal->ualarm(5_000, 0);
    
    unless ($rest2 >= 4000 && $rest2 <= 5000) {
      return 0;
    }
    
    # Cancel alarm
    Sys::Signal->ualarm(0, 0);
    
    return 1;
  }

  static method signal_constant : int () {

    Sys::Signal::Constant->SIGABRT;

    Sys::Signal::Constant->SIGALRM;

    Sys::Signal::Constant->SIGBUS;

    Sys::Signal::Constant->SIGCHLD;

    Sys::Signal::Constant->SIGCONT;

    Sys::Signal::Constant->SIGFPE;

    Sys::Signal::Constant->SIGHUP;

    Sys::Signal::Constant->SIGILL;

    Sys::Signal::Constant->SIGINT;

    Sys::Signal::Constant->SIGIO;

    Sys::Signal::Constant->SIGKILL;

    Sys::Signal::Constant->SIGPIPE;

    Sys::Signal::Constant->SIGPROF;

    Sys::Signal::Constant->SIGPWR;

    Sys::Signal::Constant->SIGQUIT;

    Sys::Signal::Constant->SIGRTMAX;

    Sys::Signal::Constant->SIGRTMIN;

    Sys::Signal::Constant->SIGSEGV;

    Sys::Signal::Constant->SIGSTKFLT;

    Sys::Signal::Constant->SIGSTOP;

    Sys::Signal::Constant->SIGSYS;

    Sys::Signal::Constant->SIGTERM;

    Sys::Signal::Constant->SIGTRAP;

    Sys::Signal::Constant->SIGTSTP;

    Sys::Signal::Constant->SIGTTIN;

    Sys::Signal::Constant->SIGTTOU;

    Sys::Signal::Constant->SIGURG;

    Sys::Signal::Constant->SIGUSR1;

    Sys::Signal::Constant->SIGUSR2;

    Sys::Signal::Constant->SIGVTALRM;

    Sys::Signal::Constant->SIGWINCH;

    Sys::Signal::Constant->SIGXCPU;

    Sys::Signal::Constant->SIGXFSZ;
    
    return 1;
  }

  static method signal_handler : int () {
    unless (Sys::Signal->SIG_DFL == Sys::Signal->SIG_DFL) {
      return 0;
    }
    
    unless (Sys::Signal->SIG_IGN == Sys::Signal->SIG_IGN) {
      return 0;
    }
    
    unless (Sys::Signal->SIG_MONITOR == Sys::Signal->SIG_MONITOR) {
      return 0;
    }
    
    return 1;
  }

  static method signal : int () {
    # Return value
    {
      {
        my $old_handler = Sys::Signal->signal(SIGNAL->SIGINT, Sys::Signal->SIG_DFL);
        
        unless ($old_handler == Sys::Signal->SIG_DFL) {
          return 0;
        }
      }
      {
        my $old_handler = Sys::Signal->signal(SIGNAL->SIGINT, Sys::Signal->SIG_IGN);
        
        unless ($old_handler == Sys::Signal->SIG_DFL) {
          return 0;
        }
      }
      {
        my $old_handler = Sys::Signal->signal(SIGNAL->SIGINT, Sys::Signal->SIG_MONITOR);
        
        unless ($old_handler == Sys::Signal->SIG_IGN) {
          return 0;
        }
      }
    }
    
    # signal
    {
      {
        unless (Sys::Signal->check_monitored_signal(SIGNAL->SIGTERM) == 0) {
          return 0;
        }
        
        Sys::Signal->signal(SIGNAL->SIGTERM, Sys::Signal->SIG_MONITOR);
        
        Sys::Signal->kill(Sys::Process->getpid, SIGNAL->SIGTERM);
        
        while (1) {
          if (Sys::Signal->check_monitored_signal(SIGNAL->SIGTERM)) {
            last;
          }
        }
        
        Sys::Signal->reset_monitored_signal(SIGNAL->SIGTERM);
        
        unless (Sys::Signal->check_monitored_signal(SIGNAL->SIGTERM) == 0) {
          return 0;
        }
      }
    }
    
    return 1;
  }
}
