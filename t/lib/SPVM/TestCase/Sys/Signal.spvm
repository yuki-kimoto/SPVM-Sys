class TestCase::Sys::Signal {
  use Sys::Signal;
  use Sys::Signal::Constant as SIGNAL;
  use Sys::Process;
  use Sys;
  use Sys::Signal::Handler;
  
  static method kill : int () {
    
    {
      my $process_id = Sys->process_id;
      
      my $status = Sys::Signal->kill($process_id, 0);
      
      unless ($status == 0) {
        return 0;
      }
    }
    
    {
      my $process_id = Sys->process_id;
      
      my $success = Sys->kill(0, $process_id);
      
      unless ($success) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method raise : int () {
    
    my $status = Sys::Signal->raise(0);
    
    unless ($status == 0) {
      return 0;
    }
    
    return 1;
  }
  
  
  static method alarm : int () {
    
    # TODO
    
    return 1;
  }
  
  static method ualarm : int () {
    
    # TODO
    
    return 1;
  }
  
  static method signal : int () {
    
    {
      Sys::Signal->signal(SIGNAL->SIGTERM, Sys::Signal->SIG_DFL);
      
      my $old_signal_handler = Sys::Signal->signal(SIGNAL->SIGTERM, Sys::Signal->SIG_IGN);
      
      unless (Sys::Signal::Handler->eq($old_signal_handler, Sys::Signal->SIG_DFL)) {
        return 0;
      }
      
      if (Sys::Signal::Handler->eq($old_signal_handler, Sys::Signal->SIG_IGN)) {
        return 0;
      }
    }
    
    {
      Sys->signal(SIGNAL->SIGTERM, "DEFAULT");
      
      Sys->signal(SIGNAL->SIGTERM, "IGNORE");
    }
    
    return 1;
  }
}
