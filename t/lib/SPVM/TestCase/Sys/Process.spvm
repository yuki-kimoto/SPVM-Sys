class TestCase::Sys::Process {
  use Sys::Process;
  use Sys::Process::Constant as Process;
  use Time;
  use Sys::Process::Tms;
  
  static method alarm : int () {
    
    my $rest1 = Sys::Process->alarm(5);
    
    unless ($rest1 == 0) {
      return 0;
    }
    
    my $rest2 = Sys::Process->alarm(5);
    
    unless ($rest2 == 5) {
      return 0;
    }
    
    return 1;
  }

  static method fork : int () {
    
    my $child_process_id = Sys::Process->fork;
    
    # The child process
    if ($child_process_id == 0) {
      Sys::Process->exit(0);
    }
    
    unless ($child_process_id > 0) {
      return 0;
    }
    
    return 1;
  }

  static method getpriority : int () {
    
    my $start = Time->time;
    
    my $nice = Sys::Process->getpriority(Process->PRIO_PROCESS, 0);
    
    unless ($nice >= -20 && $nice <= 19) {
      return 0;
    }
    
    # The constant values
    {
      Process->PRIO_PROCESS;
      Process->PRIO_PGRP;
      Process->PRIO_USER;
    }
    
    return 1;
  }

  static method setpriority : int () {
    
    my $start = Time->time;
    
    my $status = -1;
    eval { $status = Sys::Process->setpriority(Process->PRIO_PROCESS, 0, 0); };
    
    if ($@ && error == class_id Error::System) {
      warn "\n[Test Output]setpriority:setpriority failed on this environment";
    }
    else {
      unless ($status == 0) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method sleep : int () {
    
    my $start = Time->time;
    
    my $rest = Sys::Process->sleep(1);
    
    unless ($rest == 0) {
      return 0;
    }
    
    unless (Time->time - $start >= 1) {
      return 0;
    }
    
    return 1;
  }

  static method kill : int () {
    
    my $status = Sys::Process->kill(0, 0);
    
    unless ($status == 0) {
      return 0;
    }
    
    return 1;
  }

  static method wait : int () {
    
    my $child_process_id = Sys::Process->fork;
    
    # The child process
    if ($child_process_id == 0) {
      Sys::Process->exit(0);
    }
    
    unless ($child_process_id > 0) {
      return 0;
    }
    
    my $status = -1;
    my $ret_child_process_id = Sys::Process->wait(\$status);
    
    unless ($status == 0) {
      return 0;
    }
    unless ($ret_child_process_id > 0) {
      return 0;
    }
    
    return 1;
  }

  static method waitpid : int () {
    
    my $child_process_id = Sys::Process->fork;
    
    # The child process
    if ($child_process_id == 0) {
      Sys::Process->exit(0);
    }
    
    unless ($child_process_id > 0) {
      return 0;
    }
    
    my $status = -1;

    my $ret_child_process_id = -1;
    while (1) {
      $ret_child_process_id = Sys::Process->waitpid(-1, \$status, Process->WNOHANG);
      
      if (Sys::Process->WIFEXITED($status)) {
        last;
      }
    }

    unless ($status == 0) {
      return 0;
    }
    
    unless ($ret_child_process_id >= 0) {
      return 0;
    }
    
    # The status cheking methods
    {
      Sys::Process->WIFEXITED(0);
      Sys::Process->WEXITSTATUS(0);
      Sys::Process->WIFSIGNALED(0);
      Sys::Process->WTERMSIG(0);
      Sys::Process->WCOREDUMP(0);
      Sys::Process->WIFSTOPPED(0);
      Sys::Process->WSTOPSIG(0);
      Sys::Process->WIFCONTINUED(0);
    }
    
    return 1;
  }

  static method system : int () {
    
    my $cmd = "perl -e \"warn qq(\\n[Test Output]system);\"";
    my $status = Sys::Process->system($cmd);
    
    unless ($status == 0) {
      return 0;
    }
    
    return 1;
  }

  static method exit_success : void () {
    
    Sys::Process->exit(Process->EXIT_SUCCESS);
  }

  static method exit_failure : void () {
    
    Sys::Process->exit(Process->EXIT_FAILURE);
  }

  static method pipe : int () {
    
    my $fds = new int [2];
    my $status = Sys::Process->pipe($fds);
    
    unless ($status == 0) {
      return 0;
    }
    
    unless ($fds->[0] > 0) {
      return 0;
    }

    unless ($fds->[1] > 0) {
      return 0;
    }
    
    return 1;
  }

  static method getpgid : int () {
    
    my $process_group = Sys::Process->getpgid(0);
    
    unless ($process_group >= 0) {
      return 0;
    }
    
    return 1;
  }

  static method setpgid : int () {
    
    my $status = Sys::Process->setpgid(0, 0);
    
    unless ($status == 0) {
      return 0;
    }
    
    return 1;
  }


  static method getpid : int () {
    
    my $process_id = Sys::Process->getpid;
    
    unless ($process_id >= 0) {
      return 0;
    }
    
    return 1;
  }

  static method getppid : int () {
    
    my $process_id = Sys::Process->getppid;
    
    unless ($process_id >= 0) {
      return 0;
    }
    
    return 1;
  }

  static method execv_success : int ($perl_path : string, $program_file : string) {
    my $args = [$perl_path, $program_file, "abc"];
    Sys::Process->execv($perl_path, $args);
  }

  static method times : int () {
    
    my $buffer = Sys::Process::Tms->new;
    
    my $tick = Sys::Process->times($buffer);
    
    warn $tick;
    
    unless ($tick >= 0) {
      return 0;
    }

    warn $buffer->tms_utime;
    
    unless ($buffer->tms_utime > 0) {
      return 0;
    }
    
    warn $buffer->tms_stime;
    
    unless ($buffer->tms_stime >= 0) {
      return 0;
    }
    
    warn $buffer->tms_cutime;
    
    unless ($buffer->tms_cutime >= 0) {
      return 0;
    }
    
    warn $buffer->tms_cstime;
    
    unless ($buffer->tms_cstime >= 0) {
      return 0;
    }
    
    # The fields of the Sys::Process::Tms class
    {
      $buffer->set_tms_utime(0);
      $buffer->set_tms_stime(0);
      $buffer->set_tms_cutime(0);
      $buffer->set_tms_cstime(0);
    }
    
    return 1;
  }

  static method usleep : int () {
    
    my $start = Time->time;
    
    my $status = Sys::Process->usleep(1_100_000);
    
    unless ($status  == 0) {
      return 0;
    }
    
    unless (Time->time - $start >= 1) {
      return 0;
    }
    
    return 1;
  }

}
