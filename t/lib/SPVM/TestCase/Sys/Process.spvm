class TestCase::Sys::Process {
  use Sys::Process;
  use Sys::Process::Constant as PROCESS;
  use Sys::Time;
  
  static method fork : int () {
    
    my $child_process_id = Sys::Process->fork;
    
    # The child process
    if ($child_process_id == 0) {
      Sys::Process->exit(0);
    }
    
    unless ($child_process_id > 0) {
      return 0;
    }
    
    return 1;
  }

  static method getpriority : int () {
    
    my $start = Sys::Time->time;
    
    my $nice = Sys::Process->getpriority(PROCESS->PRIO_PROCESS, 0);
    
    unless ($nice >= -20 && $nice <= 19) {
      return 0;
    }
    
    # The constant values
    {
      PROCESS->PRIO_PROCESS;
      PROCESS->PRIO_PGRP;
      PROCESS->PRIO_USER;
    }
    
    return 1;
  }

  static method setpriority : int () {
    
    my $start = Sys::Time->time;
    
    my $status = -1;
    eval { $status = Sys::Process->setpriority(PROCESS->PRIO_PROCESS, 0, 0); };
    
    if ($@ && error == class_id Error::System) {
      warn "\n[Test Output]setpriority:setpriority failed on this environment";
    }
    else {
      unless ($status == 0) {
        return 0;
      }
    }
    
    return 1;
  }
  
  static method sleep : int () {
    
    my $start = Sys::Time->time;
    
    my $rest = Sys::Process->sleep(1);
    
    unless ($rest == 0) {
      return 0;
    }
    
    unless (Sys::Time->time - $start >= 1) {
      return 0;
    }
    
    return 1;
  }

  static method wait : int () {
    
    my $child_process_id = Sys::Process->fork;
    
    # The child process
    if ($child_process_id == 0) {
      Sys::Process->exit(0);
    }
    
    unless ($child_process_id > 0) {
      return 0;
    }
    
    my $status = -1;
    my $ret_child_process_id = Sys::Process->wait(\$status);
    
    unless ($status == 0) {
      return 0;
    }
    unless ($ret_child_process_id > 0) {
      return 0;
    }
    
    return 1;
  }

  static method waitpid : int () {
    
    my $child_process_id = Sys::Process->fork;
    
    # The child process
    if ($child_process_id == 0) {
      Sys::Process->exit(0);
    }
    
    unless ($child_process_id > 0) {
      return 0;
    }
    
    my $status = -1;

    my $ret_child_process_id = -1;
    while (1) {
      $ret_child_process_id = Sys::Process->waitpid(-1, \$status, PROCESS->WNOHANG);
      
      if (Sys::Process->WIFEXITED($status)) {
        last;
      }
    }

    unless ($ret_child_process_id >= 0) {
      return 0;
    }
    
    # The status cheking methods
    {
      Sys::Process->WIFEXITED(0);
      Sys::Process->WEXITSTATUS(0);
      Sys::Process->WIFSIGNALED(0);
      Sys::Process->WTERMSIG(0);
      Sys::Process->WCOREDUMP(0);
      Sys::Process->WIFSTOPPED(0);
      Sys::Process->WSTOPSIG(0);
      Sys::Process->WIFCONTINUED(0);
    }
    
    return 1;
  }

  static method system : int () {
    
    my $cmd = "perl -e \"warn qq(\\n[Test Output]system);\"";
    my $status = Sys::Process->system($cmd);
    
    unless ($status == 0) {
      return 0;
    }
    
    return 1;
  }

  static method exit_success : void () {
    
    Sys::Process->exit(PROCESS->EXIT_SUCCESS);
  }

  static method exit_failure : void () {
    
    Sys::Process->exit(PROCESS->EXIT_FAILURE);
  }

  static method pipe : int () {
    
    my $fds = new int [2];
    my $status = Sys::Process->pipe($fds);
    
    unless ($status == 0) {
      return 0;
    }
    
    unless ($fds->[0] > 0) {
      return 0;
    }

    unless ($fds->[1] > 0) {
      return 0;
    }
    
    return 1;
  }

  static method getpgid : int () {
    
    my $process_group = Sys::Process->getpgid(0);
    
    unless ($process_group >= 0) {
      return 0;
    }
    
    return 1;
  }

  static method setpgid : int () {
    
    my $status = Sys::Process->setpgid(0, 0);
    
    unless ($status == 0) {
      return 0;
    }
    
    return 1;
  }


  static method getpid : int () {
    
    my $process_id = Sys::Process->getpid;
    
    unless ($process_id >= 0) {
      return 0;
    }
    
    return 1;
  }

  static method getppid : int () {
    
    my $process_id = Sys::Process->getppid;
    
    unless ($process_id >= 0) {
      return 0;
    }
    
    return 1;
  }

  static method execv_success : int ($perl_path : string, $program_file : string) {
    my $args = [$perl_path, $program_file, "abc"];
    Sys::Process->execv($perl_path, $args);
  }

  static method usleep : int () {
    
    my $start = Sys::Time->time;
    
    my $status = Sys::Process->usleep(1_100_000);
    
    unless ($status  == 0) {
      return 0;
    }
    
    unless (Sys::Time->time - $start >= 1) {
      return 0;
    }
    
    return 1;
  }

}
